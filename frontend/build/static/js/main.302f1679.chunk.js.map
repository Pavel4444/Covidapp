{"version":3,"sources":["Components/Hlavnicards.js","Components/Datatable.js","Components/Chart.js","Components/DonutChart.js","Components/BarChart.js","Components/Api.js","App.js","serviceWorker.js","index.js"],"names":["Hlavnicards","this","props","currentDate","summary","class","style","textAlign","title","subTitle","TotalConfirmed","backgroundColor","Date","toDateString","TotalDeaths","TotalRecovered","Component","Datatable","state","countries","field","header","selectedColumns","onColumnToggle","bind","onCountrySelect","setState","event","value","orderedSelectedColumns","filter","col","includes","e","displayDialog","country","Object","assign","data","summaryCountries","className","margin","type","onInput","globalFilter","target","placeholder","Size","footer","options","optionLabel","onChange","width","dynamicColumns","map","sortable","selectionMode","selection","selectedCountry","onSelectionChange","onRowSelect","paginator","paginatorTemplate","currentPageReportTemplate","rows","rowsPerPageOptions","emptyMessage","visible","onHide","Country","axis","x","label","text","position","y","dat","json","keys","names","NewConfirmed","NewDeaths","NewRecovered","colors","Charts","totalConfirmed","types","zoom","enabled","DonutChart","BarChart","console","log","Api","global","date","chartdata","axios","get","then","response","Countries","Global","src","Chart","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wOAuCeA,E,uKAjCD,IAAD,EAC4BC,KAAKC,MAA9BC,EADH,EACGA,YAAaC,EADhB,EACgBA,QAErB,OAEI,yBAAKC,MAAM,UAEP,yBAAKA,MAAM,UAAUC,MAAO,CAAEC,UAAW,WAErC,kBAAC,OAAD,CAAMC,MAAM,WAAWC,SAAUL,EAAQM,eAAgBJ,MAAO,CAAEK,gBAAiB,YAC9E,IAAIC,KAAKT,GAAaU,iBAI/B,yBAAKR,MAAM,UAAUC,MAAO,CAAEC,UAAW,WACrC,kBAAC,OAAD,CAAMC,MAAM,SAASC,SAAUL,EAAQU,YAAaR,MAAO,CAAEK,gBAAiB,YACzE,IAAIC,KAAKT,GAAaU,iBAI/B,yBAAKR,MAAM,UAAUC,MAAO,CAAEC,UAAW,WAErC,kBAAC,OAAD,CAAMC,MAAM,YAAYC,SAAUL,EAAQW,eAAgBT,MAAO,CAAEK,gBAAiB,YAC/E,IAAIC,KAAKT,GAAaU,sB,GA1BrBG,a,yEC+NXC,E,kDAxNX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAW,CACP,CAAEC,MAAO,UAAWC,OAAQ,WAC5B,CAAED,MAAO,iBAAkBC,OAAQ,YACnC,CAAED,MAAO,cAAeC,OAAQ,UAChC,CAAED,MAAO,iBAAkBC,OAAQ,cAEvCC,gBAAiB,IAErB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBAZb,E,gEAkBVvB,KAAKyB,SAAS,CAAEJ,gBAAiBrB,KAAKiB,MAAMC,c,qCAGjCQ,GAEX,IAAIL,EAAkBK,EAAMC,MACxBC,EAAyB5B,KAAKiB,MAAMC,UAAUW,QAAO,SAAAC,GAAG,OAAIT,EAAgBU,SAASD,MACzF9B,KAAKyB,SAAS,CAAEJ,gBAAiBO,M,sCAGrBI,GACZhC,KAAKyB,SAAS,CACVQ,eAAe,EACfC,QAASC,OAAOC,OAAO,GAAIJ,EAAEK,U,+BAK3B,IAAD,OAKGC,EAAqBtC,KAAKC,MAA1BqC,iBACFlB,EAGF,yBAAKf,MAAO,CAAE,UAAa,WACvB,6CACA,uBAAGkC,UAAU,eAAelC,MAAO,CAAEmC,OAAQ,iBAC7C,kBAAC,YAAD,CAAWC,KAAK,SAASC,QAAS,SAACV,GAAD,OAAO,EAAKP,SAAS,CAAEkB,aAAcX,EAAEY,OAAOjB,SAAUkB,YAAY,gBAAgBC,KAAK,QAI7HC,EAEF,yBAAK1C,MAAO,CAAEC,UAAW,WACrB,kBAAC,cAAD,CAAaqB,MAAO3B,KAAKiB,MAAMI,gBAAiB2B,QAAShD,KAAKiB,MAAMC,UAAW+B,YAAY,SAASC,SAAUlD,KAAKsB,eAAgBjB,MAAO,CAAE8C,MAAO,YAKvJC,EAAiBpD,KAAKiB,MAAMI,gBAAgBgC,KAAI,SAACvB,GACjD,OAAO,kBAAC,SAAD,CAAQX,MAAOW,EAAIX,MAAOC,OAAQU,EAAIV,OAAQkC,UAAU,OAInE,OAEI,6BAEI,kBAAC,YAAD,CACI3B,MAAOW,EACPiB,cAAc,SACdC,UAAWxD,KAAKiB,MAAMwC,gBACtBC,kBAAmB,SAAA1B,GAAC,OAAI,EAAKP,SAAS,CAAEgC,gBAAiBzB,EAAEL,SAC3DgC,YAAa3D,KAAKwB,gBAClBJ,OAAQA,EACR2B,OAAQA,EACRa,WAAW,EACXC,kBAAkB,uGAClBC,0BAA0B,sDAC1BC,KAAM,GACNC,mBAAoB,CAAC,GAAI,KACzBrB,aAAc3C,KAAKiB,MAAM0B,aACzBsB,aAAa,oBAEZb,GAGL,yBAAKhD,MAAM,WACP,kBAAC,SAAD,CAAQ8D,QAASlE,KAAKiB,MAAMgB,cAAeb,OAAO,kBAAkB+C,OAAQ,kBAAM,EAAK1C,SAAS,CAAEQ,eAAe,MAGzGjC,KAAKiB,MAAMiB,SAEX,6BAEI,wBAAI7B,MAAO,CAAEC,UAAW,WAAxB,iBAAmDN,KAAKiB,MAAMiB,QAAQkC,SACtE,kBAAC,IAAD,CAEIC,KAAM,CACFC,EAAG,CACC7B,KAAM,WAEN8B,MAAO,CACHC,KAAM,OACNC,SAAU,iBAGlBC,EAAG,CACCH,MAAO,CACHC,KAAM,mBACNC,SAAU,kBAOtBpC,KAAMrC,KAAKiB,MAAM0D,IAAM,CACnBC,KACI,CAAC5E,KAAKiB,MAAMiB,SAKhB2C,KAAM,CAEFP,EAAG,OACH3C,MAAO,CAAC,eAAgB,YAAa,iBAEzCmD,MAAO,CACHC,aAAc,oBACdC,UAAW,kBACXC,aAAc,sBAIlBxC,KAAM,MAENyC,OAAQ,CACJH,aAAc,UACdC,UAAW,UACXC,aAAc,cAS1B,wBAAI5E,MAAO,CAAEC,UAAW,WAAxB,mBAAqDN,KAAKiB,MAAMiB,QAAQkC,SACxE,kBAAC,IAAD,CAEIC,KAAM,CACFC,EAAG,CACC7B,KAAM,WAEN8B,MAAO,CACHC,KAAM,OACNC,SAAU,iBAGlBC,EAAG,CACCH,MAAO,CACHC,KAAM,mBACNC,SAAU,kBAKtBpC,KAAMrC,KAAKiB,MAAM0D,IAAM,CACnBC,KACI,CAAC5E,KAAKiB,MAAMiB,SAKhB2C,KAAM,CAEFP,EAAG,OACH3C,MAAO,CAAC,iBAAkB,cAAe,mBAE7CmD,MAAO,CACHrE,eAAgB,iBAChBI,YAAa,eACbC,eAAgB,mBAIpB2B,KAAM,MAENyC,OAAQ,CACJzE,eAAgB,UAChBI,YAAa,UACbC,eAAgB,sB,GArMpCC,aC8DToE,E,kDAhEX,WAAYlF,GAAQ,IAAD,8BACf,cAAMA,IACDgB,MAAQ,GAFE,E,qDAUf,OAEI,kBAAC,OAAD,CAAMV,MAAM,6BAER,kBAAC,IAAD,CAAS8D,KAAM,CACXC,EAAG,CACC7B,KAAM,aACN8B,MAAO,CACHC,KAAM,OACNC,SAAU,iBAGlBC,EAAG,CACCH,MAAO,CACHC,KAAM,mBACNC,SAAU,kBAInBpC,KAAMrC,KAAKiB,MAAM0D,IAAM,CACtBC,KAAM5E,KAAKC,MAAM2E,KAEjBC,KAAM,CACFP,EAAG,aAEH3C,MAAO,CAAC,iBAAkB,iBAE9BmD,MAAO,CACHM,eAAgB,WAChB,eAAgB,UAGpBC,MAAO,CACHD,eAAgB,cAChB,eAAgB,eAGpBF,OAAQ,CACJE,eAAgB,UAChB,eAAgB,WAGpBE,KAAM,CACFC,SAAS,W,GAvDZxE,aC4CNyE,E,kDAzCX,WAAYvF,GAAQ,IAAD,8BACf,cAAMA,IACDgB,MAAQ,GAFE,E,qDAWf,OAEI,kBAAC,OAAD,CAAMV,MAAM,8BAER,kBAAC,IAAD,CAAS8B,KAAMrC,KAAKiB,MAAM0D,IAAM,CAC5BC,KACI,CAAC5E,KAAKC,MAAME,SAEhB0E,KAAM,CACFlD,MAAO,CAAC,iBAAkB,cAAe,mBAE7CmD,MAAO,CACHrE,eAAgB,WAChBI,YAAa,SACbC,eAAgB,kBAEpB2B,KAAM,QACNyC,OAAQ,CACJzE,eAAgB,UAChBI,YAAa,UACbC,eAAgB,mB,GAjCfC,aCoEV0E,E,kDAlEX,WAAYxF,GAAQ,IAAD,8BACf,cAAMA,IAEDgB,MAAQ,GAHE,E,qDAcf,OAFAyE,QAAQC,IAAI3F,KAAKC,MAAME,SAKX,kBAAC,OAAD,CAAMI,MAAM,4BAEZ,kBAAC,IAAD,CAGA8D,KAAM,CACFK,EAAG,CACCH,MAAO,CACHC,KAAM,mBACNC,SAAU,kBAMtBpC,KAAMrC,KAAKiB,MAAM0D,IAAM,CACnBC,KAAK,CAAC5E,KAAKC,MAAME,SAEb0E,KAAM,CAGFlD,MAAO,CAAC,iBAAkB,cAAe,mBAE7CmD,MAAO,CACHrE,eAAgB,WAChBI,YAAa,SACbC,eAAgB,aAIpB2B,KAAM,MAENyC,OAAQ,CACJzE,eAAgB,UAChBI,YAAa,UACbC,eAAgB,mB,GAtDzBC,aCyER6E,E,kDApEb,WAAY3F,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACXC,UAAW,GACX2E,OAAQ,GACRC,KAAM,GACNC,UAAW,GACXnB,KAAM,IAPS,E,gEAaE,IAAD,OAElBoB,IAAMC,IAAN,eACGC,MAAK,SAAAC,GAAQ,OAAIA,EAAS9D,QAC1B6D,MAAK,SAAC7D,GACL,EAAKZ,SAAS,CAAEmD,KAAMvC,OAI1B2D,IAAMC,IAAN,eACGC,MAAK,SAAAC,GAAQ,OAAIA,EAAS9D,QAC1B6D,MAAK,SAAC7D,GACL,EAAKZ,SAAS,CAAEP,UAAWmB,EAAK+D,YAChC,EAAK3E,SAAS,CAAEoE,OAAQxD,EAAKgE,SAC7B,EAAK5E,SAAS,CAAEqE,KAAMzD,EAAK1B,Y,+BAW/B,OAEE,yBAAKP,MAAM,UACT,yBAAKA,MAAM,WAAWC,MAAO,CAAEC,UAAW,SAAUI,gBAAiB,YAAa,yBAAK4F,IAAI,qCAC3F,yBAAKlG,MAAM,YAAW,kBAAC,EAAD,CAAaF,YAAaF,KAAKiB,MAAM6E,KAAM3F,QAASH,KAAKiB,MAAM4E,UAGrF,yBAAKzF,MAAM,YACT,yBAAKA,MAAM,UACT,yBAAKA,MAAM,UAAUC,MAAO,CAAEC,UAAW,WACvC,kBAAC,EAAD,CAAUJ,YAAaF,KAAKiB,MAAM6E,KAAM3F,QAASH,KAAKiB,MAAM4E,UAG9D,yBAAKzF,MAAM,UAAUC,MAAO,CAAEC,UAAW,WACvC,kBAAC,EAAD,CAAYH,QAASH,KAAKiB,MAAM4E,YAItC,yBAAKzF,MAAM,WAAWC,MAAO,CAAEC,UAAW,WAAY,kBAACiG,EAAD,CAAQ3B,KAAM5E,KAAKiB,MAAM2D,QAC/E,yBAAKxE,MAAM,YAAW,kBAAC,EAAD,CAAWkC,iBAAkBtC,KAAKiB,MAAMC,aAC9D,yBAAKd,MAAM,WAAWC,MAAO,CAAEC,UAAW,SAAUI,gBAAiB,YAArE,+C,GA5DUK,aCmBHyF,E,uKAdX,OACE,yBAAKpG,MAAM,4BACT,yBAAKA,MAAM,WACX,yBAAKA,MAAM,kBAAkBC,MAAO,CAAEK,gBAAiB,YACrD,kBAAC,EAAD,OAEF,yBAAKN,MAAM,gB,GAXDW,aCIE0F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.302f1679.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card } from 'primereact/card';\r\n\r\nclass Hlavnicards extends Component {\r\n\r\n\r\n    render() {\r\n        const { currentDate, summary } = this.props;\r\n\r\n        return (\r\n\r\n            <div class=\"p-grid\">\r\n\r\n                <div class=\"p-col-4\" style={{ textAlign: 'center' }}>\r\n\r\n                    <Card title=\"Infected\" subTitle={summary.TotalConfirmed} style={{ backgroundColor: '#ff6666' }}  >\r\n                        {new Date(currentDate).toDateString()}\r\n                    </Card>\r\n\r\n                </div>\r\n                <div class=\"p-col-4\" style={{ textAlign: 'center' }}>\r\n                    <Card title=\"Deaths\" subTitle={summary.TotalDeaths} style={{ backgroundColor: '#8f8f8f' }} >\r\n                        {new Date(currentDate).toDateString()}\r\n                    </Card>\r\n\r\n                </div>\r\n                <div class=\"p-col-4\" style={{ textAlign: 'center' }}>\r\n\r\n                    <Card title=\"Recovered\" subTitle={summary.TotalRecovered} style={{ backgroundColor: '#60eb83' }} >\r\n                        {new Date(currentDate).toDateString()}\r\n                    </Card>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Hlavnicards;","import React, { Component } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\nimport C3Chart from 'react-c3js';\r\nimport 'c3/c3.css';\r\nimport { Dialog } from 'primereact/dialog';\r\nclass Datatable extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            countries: [\r\n                { field: \"Country\", header: \"Country\" },\r\n                { field: \"TotalConfirmed\", header: 'Infected' },\r\n                { field: \"TotalDeaths\", header: 'Deaths' },\r\n                { field: \"TotalRecovered\", header: 'Recovered' }\r\n            ],\r\n            selectedColumns: []\r\n        };\r\n        this.onColumnToggle = this.onColumnToggle.bind(this);\r\n        this.onCountrySelect = this.onCountrySelect.bind(this);\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ selectedColumns: this.state.countries });\r\n    }\r\n\r\n    onColumnToggle(event) {\r\n\r\n        let selectedColumns = event.value;\r\n        let orderedSelectedColumns = this.state.countries.filter(col => selectedColumns.includes(col));\r\n        this.setState({ selectedColumns: orderedSelectedColumns });\r\n    }\r\n\r\n    onCountrySelect(e) {\r\n        this.setState({\r\n            displayDialog: true,\r\n            country: Object.assign({}, e.data)\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n\r\n        const { summaryCountries } = this.props;\r\n        const header = (\r\n\r\n\r\n            <div style={{ 'textAlign': 'center' }}>\r\n                <h1>Country stats</h1>\r\n                <i className=\"pi pi-search\" style={{ margin: '4px 4px 0 0' }}></i>\r\n                <InputText type=\"search\" onInput={(e) => this.setState({ globalFilter: e.target.value })} placeholder=\"Global Search\" Size=\"35\" />\r\n            </div>\r\n        );\r\n\r\n        const footer = (\r\n\r\n            <div style={{ textAlign: 'center' }}>\r\n                <MultiSelect value={this.state.selectedColumns} options={this.state.countries} optionLabel=\"header\" onChange={this.onColumnToggle} style={{ width: '250px' }} />\r\n            </div>\r\n        );\r\n\r\n\r\n        let dynamicColumns = this.state.selectedColumns.map((col) => {\r\n            return <Column field={col.field} header={col.header} sortable={true} />;\r\n        });\r\n\r\n\r\n        return (\r\n\r\n            <div>\r\n\r\n                <DataTable\r\n                    value={summaryCountries}\r\n                    selectionMode=\"single\"\r\n                    selection={this.state.selectedCountry}\r\n                    onSelectionChange={e => this.setState({ selectedCountry: e.value })}\r\n                    onRowSelect={this.onCountrySelect}\r\n                    header={header}\r\n                    footer={footer}\r\n                    paginator={true}\r\n                    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\r\n                    rows={20}\r\n                    rowsPerPageOptions={[20, 100]}\r\n                    globalFilter={this.state.globalFilter}\r\n                    emptyMessage=\"No records found\">\r\n\r\n                    {dynamicColumns}\r\n                </DataTable>\r\n\r\n                <div class=\"p-col-8\">\r\n                    <Dialog visible={this.state.displayDialog} header=\"Country Details\" onHide={() => this.setState({ displayDialog: false })}>\r\n\r\n                        {\r\n                            this.state.country &&\r\n\r\n                            <div>\r\n\r\n                                <h1 style={{ textAlign: 'center' }}>24h stats for {this.state.country.Country}</h1>\r\n                                <C3Chart\r\n\r\n                                    axis={{\r\n                                        x: {\r\n                                            type: 'category',\r\n\r\n                                            label: {\r\n                                                text: 'Date',\r\n                                                position: 'outer-center'\r\n                                            }\r\n                                        },\r\n                                        y: {\r\n                                            label: {\r\n                                                text: 'Number of people',\r\n                                                position: 'outer-middle'\r\n                                            }\r\n                                        },\r\n\r\n                                    }}\r\n\r\n\r\n                                    data={this.state.dat = {\r\n                                        json:\r\n                                            [this.state.country]\r\n\r\n\r\n                                        ,\r\n\r\n                                        keys: {\r\n\r\n                                            x: 'Date',\r\n                                            value: ['NewConfirmed', 'NewDeaths', 'NewRecovered']\r\n                                        },\r\n                                        names: {\r\n                                            NewConfirmed: '24 hours infected',\r\n                                            NewDeaths: '24 hours deaths',\r\n                                            NewRecovered: '24 hours recovered'\r\n\r\n                                        },\r\n\r\n                                        type: 'bar',\r\n\r\n                                        colors: {\r\n                                            NewConfirmed: '#ff6666',\r\n                                            NewDeaths: '#8f8f8f',\r\n                                            NewRecovered: '#60eb83',\r\n\r\n                                        },\r\n\r\n\r\n                                    }\r\n\r\n                                    } />\r\n\r\n                                <h1 style={{ textAlign: 'center' }}>Total stats for {this.state.country.Country}</h1>\r\n                                <C3Chart\r\n\r\n                                    axis={{\r\n                                        x: {\r\n                                            type: 'category',\r\n\r\n                                            label: {\r\n                                                text: 'Date',\r\n                                                position: 'outer-center'\r\n                                            }\r\n                                        },\r\n                                        y: {\r\n                                            label: {\r\n                                                text: 'Number of people',\r\n                                                position: 'outer-middle'\r\n                                            }\r\n                                        },\r\n\r\n                                    }}\r\n                                    data={this.state.dat = {\r\n                                        json:\r\n                                            [this.state.country]\r\n\r\n\r\n                                        ,\r\n\r\n                                        keys: {\r\n\r\n                                            x: 'Date',\r\n                                            value: ['TotalConfirmed', 'TotalDeaths', 'TotalRecovered']\r\n                                        },\r\n                                        names: {\r\n                                            TotalConfirmed: 'Total infected',\r\n                                            TotalDeaths: 'Total deaths',\r\n                                            TotalRecovered: 'Total recovered'\r\n\r\n                                        },\r\n\r\n                                        type: 'bar',\r\n\r\n                                        colors: {\r\n                                            TotalConfirmed: '#ff6666',\r\n                                            TotalDeaths: '#8f8f8f',\r\n                                            TotalRecovered: '#60eb83',\r\n\r\n                                        },\r\n\r\n\r\n                                    }\r\n\r\n                                    } />\r\n\r\n\r\n                            </div>\r\n\r\n                        }\r\n\r\n                    </Dialog>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Datatable;","import React, { Component } from 'react';\r\nimport { Card } from 'primereact/card';\r\nimport C3Chart from 'react-c3js';\r\nimport 'c3/c3.css';\r\nclass Charts extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <Card title=\"Global stats - line chart\">\r\n                 \r\n                <C3Chart axis={{\r\n                    x: {\r\n                        type: 'timeseries',\r\n                        label: {\r\n                            text: 'Date',\r\n                            position: 'outer-center'\r\n                        }\r\n                    },\r\n                    y: {\r\n                        label: {\r\n                            text: 'Number of people',\r\n                            position: 'outer-middle'\r\n                        }\r\n                    },\r\n\r\n                }} data={this.state.dat = {\r\n                    json: this.props.json,\r\n\r\n                    keys: {\r\n                        x: 'reportDate',\r\n\r\n                        value: ['totalConfirmed', 'deaths.total']\r\n                    },\r\n                    names: {\r\n                        totalConfirmed: 'Infected',\r\n                        'deaths.total': 'Deaths'\r\n\r\n                    },\r\n                    types: {\r\n                        totalConfirmed: 'area-spline',\r\n                        'deaths.total': 'area-spline'\r\n\r\n                    },\r\n                    colors: {\r\n                        totalConfirmed: '#ff6666',\r\n                        'deaths.total': '#8f8f8f',\r\n\r\n                    },\r\n                    zoom: {\r\n                        enabled: true\r\n                    }\r\n\r\n                }} />\r\n\r\n            </Card>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Charts;","import React, { Component } from 'react';\r\nimport { Card } from 'primereact/card';\r\nimport C3Chart from 'react-c3js';\r\nimport 'c3/c3.css';\r\n\r\nclass DonutChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <Card title=\"Global stats - donut chart\">\r\n\r\n                <C3Chart data={this.state.dat = {\r\n                    json:\r\n                        [this.props.summary]\r\n                    ,\r\n                    keys: {\r\n                        value: ['TotalConfirmed', 'TotalDeaths', 'TotalRecovered']\r\n                    },\r\n                    names: {\r\n                        TotalConfirmed: 'Infected',\r\n                        TotalDeaths: 'Deaths',\r\n                        TotalRecovered: 'TotalRecovered'\r\n                    },\r\n                    type: 'donut',\r\n                    colors: {\r\n                        TotalConfirmed: '#ff6666',\r\n                        TotalDeaths: '#8f8f8f',\r\n                        TotalRecovered: '#60eb83'\r\n                    },\r\n                }} />\r\n\r\n            </Card>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default DonutChart;","import React, { Component } from 'react';\r\nimport { Card } from 'primereact/card';\r\nimport C3Chart from 'react-c3js';\r\nimport 'c3/c3.css';\r\n\r\nclass BarChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n   \r\n        this.state = {\r\n            \r\n        };\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        console.log(this.props.summary);\r\n        \r\n        return (\r\n                      \r\n\r\n                    <Card title=\"Global stats - bar chart\">\r\n\r\n                    <C3Chart \r\n                    \r\n                    \r\n                    axis={{\r\n                        y: {\r\n                            label: {\r\n                                text: 'Number of people',\r\n                                position: 'outer-middle'\r\n                            }\r\n                        },\r\n\r\n                    }}                   \r\n                    \r\n                    data={this.state.dat = {\r\n                        json:[this.props.summary],\r\n                        \r\n                            keys: {\r\n                              \r\n                               \r\n                                value: ['TotalConfirmed', 'TotalDeaths', 'TotalRecovered']\r\n                            },\r\n                            names: {\r\n                                TotalConfirmed: 'Infected',\r\n                                TotalDeaths: 'Deaths',\r\n                                TotalRecovered: 'Recovered'\r\n                \r\n                            },\r\n\r\n                            type: 'bar' ,\r\n\r\n                            colors: {\r\n                                TotalConfirmed: '#ff6666',\r\n                                TotalDeaths: '#8f8f8f',\r\n                                TotalRecovered: '#60eb83'\r\n                                \r\n                            },\r\n                \r\n                        \r\n                        }} />\r\n\r\n                    </Card>           \r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default BarChart;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Hlavnicards from './Hlavnicards';\r\nimport Datatable from './Datatable';\r\nimport Charts from './Chart';\r\nimport DonutChart from './DonutChart';\r\nimport BarChart from './BarChart';\r\n\r\nclass Api extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countries: [],\r\n      global: [],\r\n      date: [],\r\n      chartdata: [],\r\n      json: [],\r\n\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get(`api/corona1`)\r\n      .then(response => response.data)\r\n      .then((data) => {\r\n        this.setState({ json: data })\r\n\r\n      })\r\n\r\n    axios.get(`api/corona2`)\r\n      .then(response => response.data)\r\n      .then((data) => {\r\n        this.setState({ countries: data.Countries })\r\n        this.setState({ global: data.Global })\r\n        this.setState({ date: data.Date })\r\n\r\n      })\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n\r\n\r\n    return (\r\n\r\n      <div class=\"p-grid\">\r\n        <div class=\"p-col-12\" style={{ textAlign: 'center', backgroundColor: '#F1EEE6' }}><img src='https://i.imgur.com/RnJuZkX.png'></img></div>\r\n        <div class=\"p-col-12\"><Hlavnicards currentDate={this.state.date} summary={this.state.global} /></div>\r\n\r\n\r\n        <div class=\"p-col-12\">\r\n          <div class=\"p-grid\">\r\n            <div class=\"p-col-6\" style={{ textAlign: 'center' }}>\r\n              <BarChart currentDate={this.state.date} summary={this.state.global} />\r\n\r\n            </div>\r\n            <div class=\"p-col-6\" style={{ textAlign: 'center' }}>\r\n              <DonutChart summary={this.state.global} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"p-col-12\" style={{ textAlign: 'center' }}><Charts json={this.state.json} /></div>\r\n        <div class=\"p-col-12\"><Datatable summaryCountries={this.state.countries} /></div>\r\n        <div class=\"p-col-12\" style={{ textAlign: 'center', backgroundColor: '#F1EEE6' }}>Covid app using Primereact, C3, Spring</div>\r\n      </div>\r\n\r\n\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Api;","import React, { Component } from 'react';\nimport \"primereact/resources/themes/nova-light/theme.css\";\nimport \"primereact/resources/primereact.min.css\";\nimport \"primeflex/primeflex.css\";\nimport 'primeicons/primeicons.css';\nimport Api from './Components/Api.js';\n\n\nclass App extends Component {\n\n\n  render() {\n\n    return (\n      <div class=\"p-grid p-justify-between\">\n        <div class=\"p-md-1\"></div>\n        <div class=\"p-col-12 p-md-8\" style={{ backgroundColor: '#FAF9F6' }} >\n          <Api />\n        </div>\n        <div class=\"p-md-1\"></div>\n\n      </div>\n\n\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}