{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\007ac\\\\Desktop\\\\prace\\\\frontend\\\\src\\\\Components\\\\Datatable.js\";\nimport React, { Component } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { InputText } from 'primereact/inputtext';\nimport { MultiSelect } from 'primereact/multiselect';\nimport C3Chart from 'react-c3js';\nimport 'c3/c3.css';\nimport { Dialog } from 'primereact/dialog';\n\nclass Datatable extends Component {\n  constructor() {\n    super();\n    this.state = {\n      countries: [{\n        field: \"Country\",\n        header: \"Country\"\n      }, {\n        field: \"TotalConfirmed\",\n        header: 'Infected'\n      }, {\n        field: \"TotalDeaths\",\n        header: 'Deaths'\n      }, {\n        field: \"TotalRecovered\",\n        header: 'Recovered'\n      }],\n      selectedColumns: []\n    };\n    this.onColumnToggle = this.onColumnToggle.bind(this);\n    this.onCountrySelect = this.onCountrySelect.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      selectedColumns: this.state.countries\n    });\n  }\n\n  onColumnToggle(event) {\n    let selectedColumns = event.value;\n    let orderedSelectedColumns = this.state.countries.filter(col => selectedColumns.includes(col));\n    this.setState({\n      selectedColumns: orderedSelectedColumns\n    });\n  }\n\n  onCountrySelect(e) {\n    this.setState({\n      displayDialog: true,\n      country: Object.assign({}, e.data)\n    });\n  }\n\n  render() {\n    const {\n      summaryCountries\n    } = this.props;\n    const header = /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        'textAlign': 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, \"Country stats\"), /*#__PURE__*/React.createElement(\"i\", {\n      className: \"pi pi-search\",\n      style: {\n        margin: '4px 4px 0 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(InputText, {\n      type: \"search\",\n      onInput: e => this.setState({\n        globalFilter: e.target.value\n      }),\n      placeholder: \"Global Search\",\n      Size: \"35\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }));\n    const footer = /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MultiSelect, {\n      value: this.state.selectedColumns,\n      options: this.state.countries,\n      optionLabel: \"header\",\n      onChange: this.onColumnToggle,\n      style: {\n        width: '250px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }));\n    let dynamicColumns = this.state.selectedColumns.map(col => {\n      return /*#__PURE__*/React.createElement(Column, {\n        field: col.field,\n        header: col.header,\n        sortable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 20\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DataTable, {\n      value: summaryCountries,\n      selectionMode: \"single\",\n      selection: this.state.selectedCountry,\n      onSelectionChange: e => this.setState({\n        selectedCountry: e.value\n      }),\n      onRowSelect: this.onCountrySelect,\n      header: header,\n      footer: footer,\n      paginator: true,\n      paginatorTemplate: \"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\",\n      currentPageReportTemplate: \"Showing {first} to {last} of {totalRecords} entries\",\n      rows: 20,\n      rowsPerPageOptions: [20, 100],\n      globalFilter: this.state.globalFilter,\n      emptyMessage: \"No records found\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, dynamicColumns), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"p-col-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Dialog, {\n      visible: this.state.displayDialog,\n      header: \"Country Details\",\n      onHide: () => this.setState({\n        displayDialog: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, this.state.country && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 33\n      }\n    }, \"24h stats for \", this.state.country.Country), /*#__PURE__*/React.createElement(C3Chart, {\n      axis: {\n        x: {\n          type: 'category',\n          label: {\n            text: 'Date',\n            position: 'outer-center'\n          }\n        },\n        y: {\n          label: {\n            text: 'Number of people',\n            position: 'outer-middle'\n          }\n        }\n      },\n      data: this.state.dat = {\n        json: [this.state.country],\n        keys: {\n          x: 'Date',\n          value: ['NewConfirmed', 'NewDeaths', 'NewRecovered']\n        },\n        names: {\n          NewConfirmed: '24 hours infected',\n          NewDeaths: '24 hours deaths',\n          NewRecovered: '24 hours recovered'\n        },\n        type: 'bar',\n        colors: {\n          NewConfirmed: '#ff6666',\n          NewDeaths: '#8f8f8f',\n          NewRecovered: '#60eb83'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 33\n      }\n    }, \"Total stats for \", this.state.country.Country), /*#__PURE__*/React.createElement(C3Chart, {\n      axis: {\n        x: {\n          type: 'category',\n          label: {\n            text: 'Date',\n            position: 'outer-center'\n          }\n        },\n        y: {\n          label: {\n            text: 'Number of people',\n            position: 'outer-middle'\n          }\n        }\n      },\n      data: this.state.dat = {\n        json: [this.state.country],\n        keys: {\n          x: 'Date',\n          value: ['TotalConfirmed', 'TotalDeaths', 'TotalRecovered']\n        },\n        names: {\n          TotalConfirmed: 'Total infected',\n          TotalDeaths: 'Total deaths',\n          TotalRecovered: 'Total recovered'\n        },\n        type: 'bar',\n        colors: {\n          TotalConfirmed: '#ff6666',\n          TotalDeaths: '#8f8f8f',\n          TotalRecovered: '#60eb83'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 33\n      }\n    })))));\n  }\n\n}\n\nexport default Datatable;","map":{"version":3,"sources":["C:/Users/007ac/Desktop/prace/frontend/src/Components/Datatable.js"],"names":["React","Component","DataTable","Column","InputText","MultiSelect","C3Chart","Dialog","Datatable","constructor","state","countries","field","header","selectedColumns","onColumnToggle","bind","onCountrySelect","componentDidMount","setState","event","value","orderedSelectedColumns","filter","col","includes","e","displayDialog","country","Object","assign","data","render","summaryCountries","props","margin","globalFilter","target","footer","textAlign","width","dynamicColumns","map","selectedCountry","Country","x","type","label","text","position","y","dat","json","keys","names","NewConfirmed","NewDeaths","NewRecovered","colors","TotalConfirmed","TotalDeaths","TotalRecovered"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\nimport C3Chart from 'react-c3js';\r\nimport 'c3/c3.css';\r\nimport { Dialog } from 'primereact/dialog';\r\nclass Datatable extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            countries: [\r\n                { field: \"Country\", header: \"Country\" },\r\n                { field: \"TotalConfirmed\", header: 'Infected' },\r\n                { field: \"TotalDeaths\", header: 'Deaths' },\r\n                { field: \"TotalRecovered\", header: 'Recovered' }\r\n            ],\r\n            selectedColumns: []\r\n        };\r\n        this.onColumnToggle = this.onColumnToggle.bind(this);\r\n        this.onCountrySelect = this.onCountrySelect.bind(this);\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ selectedColumns: this.state.countries });\r\n    }\r\n\r\n    onColumnToggle(event) {\r\n\r\n        let selectedColumns = event.value;\r\n        let orderedSelectedColumns = this.state.countries.filter(col => selectedColumns.includes(col));\r\n        this.setState({ selectedColumns: orderedSelectedColumns });\r\n    }\r\n\r\n    onCountrySelect(e) {\r\n        this.setState({\r\n            displayDialog: true,\r\n            country: Object.assign({}, e.data)\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n\r\n        const { summaryCountries } = this.props;\r\n        const header = (\r\n\r\n\r\n            <div style={{ 'textAlign': 'center' }}>\r\n                <h1>Country stats</h1>\r\n                <i className=\"pi pi-search\" style={{ margin: '4px 4px 0 0' }}></i>\r\n                <InputText type=\"search\" onInput={(e) => this.setState({ globalFilter: e.target.value })} placeholder=\"Global Search\" Size=\"35\" />\r\n            </div>\r\n        );\r\n\r\n        const footer = (\r\n\r\n            <div style={{ textAlign: 'center' }}>\r\n                <MultiSelect value={this.state.selectedColumns} options={this.state.countries} optionLabel=\"header\" onChange={this.onColumnToggle} style={{ width: '250px' }} />\r\n            </div>\r\n        );\r\n\r\n\r\n        let dynamicColumns = this.state.selectedColumns.map((col) => {\r\n            return <Column field={col.field} header={col.header} sortable={true} />;\r\n        });\r\n\r\n\r\n        return (\r\n\r\n            <div>\r\n\r\n                <DataTable\r\n                    value={summaryCountries}\r\n                    selectionMode=\"single\"\r\n                    selection={this.state.selectedCountry}\r\n                    onSelectionChange={e => this.setState({ selectedCountry: e.value })}\r\n                    onRowSelect={this.onCountrySelect}\r\n                    header={header}\r\n                    footer={footer}\r\n                    paginator={true}\r\n                    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\r\n                    rows={20}\r\n                    rowsPerPageOptions={[20, 100]}\r\n                    globalFilter={this.state.globalFilter}\r\n                    emptyMessage=\"No records found\">\r\n\r\n                    {dynamicColumns}\r\n                </DataTable>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <div class=\"p-col-8\">\r\n                    <Dialog visible={this.state.displayDialog} header=\"Country Details\" onHide={() => this.setState({ displayDialog: false })}>\r\n\r\n                        {\r\n                            this.state.country &&\r\n\r\n                            <div>\r\n\r\n\r\n\r\n                                <h1 style={{ textAlign: 'center' }}>24h stats for {this.state.country.Country}</h1>\r\n                                <C3Chart\r\n\r\n                                    axis={{\r\n                                        x: {\r\n                                            type: 'category',\r\n\r\n                                            label: {\r\n                                                text: 'Date',\r\n                                                position: 'outer-center'\r\n                                            }\r\n                                        },\r\n                                        y: {\r\n                                            label: {\r\n                                                text: 'Number of people',\r\n                                                position: 'outer-middle'\r\n                                            }\r\n                                        },\r\n\r\n                                    }}\r\n\r\n\r\n                                    data={this.state.dat = {\r\n                                        json:\r\n                                            [this.state.country]\r\n\r\n\r\n                                        ,\r\n\r\n                                        keys: {\r\n\r\n                                            x: 'Date',\r\n                                            value: ['NewConfirmed', 'NewDeaths', 'NewRecovered']\r\n                                        },\r\n                                        names: {\r\n                                            NewConfirmed: '24 hours infected',\r\n                                            NewDeaths: '24 hours deaths',\r\n                                            NewRecovered: '24 hours recovered'\r\n\r\n                                        },\r\n\r\n                                        type: 'bar',\r\n\r\n                                        colors: {\r\n                                            NewConfirmed: '#ff6666',\r\n                                            NewDeaths: '#8f8f8f',\r\n                                            NewRecovered: '#60eb83',\r\n\r\n                                        },\r\n\r\n\r\n                                    }\r\n\r\n                                    } />\r\n\r\n                                <h1 style={{ textAlign: 'center' }}>Total stats for {this.state.country.Country}</h1>\r\n                                <C3Chart\r\n\r\n                                    axis={{\r\n                                        x: {\r\n                                            type: 'category',\r\n\r\n                                            label: {\r\n                                                text: 'Date',\r\n                                                position: 'outer-center'\r\n                                            }\r\n                                        },\r\n                                        y: {\r\n                                            label: {\r\n                                                text: 'Number of people',\r\n                                                position: 'outer-middle'\r\n                                            }\r\n                                        },\r\n\r\n                                    }}\r\n                                    data={this.state.dat = {\r\n                                        json:\r\n                                            [this.state.country]\r\n\r\n\r\n                                        ,\r\n\r\n                                        keys: {\r\n\r\n                                            x: 'Date',\r\n                                            value: ['TotalConfirmed', 'TotalDeaths', 'TotalRecovered']\r\n                                        },\r\n                                        names: {\r\n                                            TotalConfirmed: 'Total infected',\r\n                                            TotalDeaths: 'Total deaths',\r\n                                            TotalRecovered: 'Total recovered'\r\n\r\n                                        },\r\n\r\n                                        type: 'bar',\r\n\r\n                                        colors: {\r\n                                            TotalConfirmed: '#ff6666',\r\n                                            TotalDeaths: '#8f8f8f',\r\n                                            TotalRecovered: '#60eb83',\r\n\r\n                                        },\r\n\r\n\r\n                                    }\r\n\r\n                                    } />\r\n\r\n\r\n                            </div>\r\n\r\n\r\n\r\n\r\n                        }\r\n\r\n                    </Dialog>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Datatable;"]},"metadata":{},"sourceType":"module"}